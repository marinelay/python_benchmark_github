[
    {
        "url": "https://api.github.com/repos/tiangolo/fastapi/issues/422",
        "repository_url": "https://api.github.com/repos/tiangolo/fastapi",
        "labels_url": "https://api.github.com/repos/tiangolo/fastapi/issues/422/labels{/name}",
        "comments_url": "https://api.github.com/repos/tiangolo/fastapi/issues/422/comments",
        "events_url": "https://api.github.com/repos/tiangolo/fastapi/issues/422/events",
        "html_url": "https://github.com/tiangolo/fastapi/pull/422",
        "id": 477241247,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0NjA0MTEw",
        "number": 422,
        "title": "Fix unskipped defaults",
        "user": {
            "login": "dmontagu",
            "id": 35119617,
            "node_id": "MDQ6VXNlcjM1MTE5NjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/35119617?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dmontagu",
            "html_url": "https://github.com/dmontagu",
            "followers_url": "https://api.github.com/users/dmontagu/followers",
            "following_url": "https://api.github.com/users/dmontagu/following{/other_user}",
            "gists_url": "https://api.github.com/users/dmontagu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dmontagu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dmontagu/subscriptions",
            "organizations_url": "https://api.github.com/users/dmontagu/orgs",
            "repos_url": "https://api.github.com/users/dmontagu/repos",
            "events_url": "https://api.github.com/users/dmontagu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dmontagu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-08-06T08:29:45Z",
        "updated_at": "2019-08-26T13:25:05Z",
        "closed_at": "2019-08-26T13:24:58Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/tiangolo/fastapi/pulls/422",
            "html_url": "https://github.com/tiangolo/fastapi/pull/422",
            "diff_url": "https://github.com/tiangolo/fastapi/pull/422.diff",
            "patch_url": "https://github.com/tiangolo/fastapi/pull/422.patch"
        },
        "body": "Addresses https://github.com/tiangolo/fastapi/issues/421\r\n\r\nCurrently, if you return a `BaseModel` instance in a route with a `BaseModel` response_type, the `skip_defaults` value does not influence the result. This PR fixes this.\r\n\r\n-----\r\n**Details**\r\n\r\nThe source of the problem is that calling `field.validate` on a model results in a new model with the fields set. I dug in on the pydantic side and it looks like this is due to the recent change to re-parse the model with a non-subclass type when response_model is set. If you look in `BaseModel.validate` (which is ultimately called if you follow it deep enough), you can see the precise spot where defaults aren't being skipped:\r\n\r\n```python\r\n@classmethod\r\n    def validate(cls: Type['Model'], value: Any) -> 'Model':\r\n        if isinstance(value, dict):\r\n            return cls.parse_obj(value)\r\n        elif isinstance(value, cls):\r\n            return value.copy()\r\n        elif cls.__config__.orm_mode:\r\n            return cls.from_orm(value)\r\n        else:\r\n            with change_exception(DictError, TypeError, ValueError):\r\n                return cls.parse_obj(value)\r\n```\r\n\r\nIt calls into `parse_obj` on the last line, which subsequently calls `dict` on the object and then parses the dict. Unfortunately, this means defaults don't get skipped.\r\n\r\n**I don't think it makes sense to change this on the pydantic side** because otherwise you'd run into problems parsing models with default values into non-subclass models with required values. So, if we want to stick with this approach of creating a new class to force a reparse, we probably need to handle the \r\n\r\n----\r\n\r\nThat said, I would also be in favor of a larger refactor if we could come up with a way to get the desired field safely without another round of parsing/dumping \ud83d\ude2c. But that does seem hard.",
        "performed_via_github_app": null,
        "score": 1.0
    }
]