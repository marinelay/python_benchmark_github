diff --git a/python/paddle/fluid/dygraph/nn.py b/python/paddle/fluid/dygraph/nn.py
index 51eaccc05831..1b575856a5cd 100644
--- a/python/paddle/fluid/dygraph/nn.py
+++ b/python/paddle/fluid/dygraph/nn.py
@@ -2019,6 +2019,7 @@ def __init__(self,
             default_initializer=Constant(1.0))
 
     def forward(self, input):
+        check_variable_and_dtype(input, 'input', ['float32'], 'PRelu')
         out = self._helper.create_variable_for_type_inference(self._dtype)
         self._helper.append_op(
             type="prelu",
diff --git a/python/paddle/fluid/tests/unittests/test_prelu_op.py b/python/paddle/fluid/tests/unittests/test_prelu_op.py
index ef984d80758e..25ed9664ef1f 100644
--- a/python/paddle/fluid/tests/unittests/test_prelu_op.py
+++ b/python/paddle/fluid/tests/unittests/test_prelu_op.py
@@ -16,10 +16,28 @@
 
 import unittest
 import numpy as np
+import paddle.fluid as fluid
 import six
 from op_test import OpTest, skip_check_grad_ci
 
 
+class TestPReluAPIError(unittest.TestCase):
+    def test_errors(self):
+        with fluid.program_guard(fluid.Program(), fluid.Program()):
+            layer = fluid.PRelu(
+                mode='all',
+                param_attr=fluid.ParamAttr(
+                    initializer=fluid.initializer.Constant(1.0)))
+            # the input must be Variable.
+            x0 = fluid.create_lod_tensor(
+                np.array([-1, 3, 5, 5]), [[1, 1, 1, 1]], fluid.CPUPlace())
+            self.assertRaises(TypeError, layer, x0)
+            # the input dtype must be float32
+            data_t = fluid.data(
+                name="input", shape=[5, 200, 100, 100], dtype="float64")
+            self.assertRaises(TypeError, layer, data_t)
+
+
 class PReluTest(OpTest):
     def setUp(self):
         self.init_input_shape()
