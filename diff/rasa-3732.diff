diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 317017925071..ec54cee91989 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -29,6 +29,7 @@ Fixed
 - default actions overriden by custom actions and listed in the domain are excluded
   from domain warnings
 - SQL ``data`` column type to ``Text`` for compatibility with MySQL
+- non-featurizer training parameters don't break `SklearnPolicy` anymore
 
 [1.0.9] - 2019-06-10
 ^^^^^^^^^^^^^^^^^^^^
diff --git a/rasa/core/policies/sklearn_policy.py b/rasa/core/policies/sklearn_policy.py
index a408b9332699..7c6f26aa2ff2 100644
--- a/rasa/core/policies/sklearn_policy.py
+++ b/rasa/core/policies/sklearn_policy.py
@@ -88,12 +88,10 @@ def _default_model():
     def _state(self):
         return {attr: getattr(self, attr) for attr in self._pickle_params}
 
-    def model_architecture(self):
+    def model_architecture(self, **kwargs):
         # filter out kwargs that cannot be passed to model
-        self._train_params = self._get_valid_params(
-            self.model.__init__, **self._train_params
-        )
-        return self.model.set_params(**self._train_params)
+        train_params = self._get_valid_params(self.model.__init__, **kwargs)
+        return self.model.set_params(**train_params)
 
     def _extract_training_data(self, training_data):
         # transform y from one-hot to num_classes
@@ -128,7 +126,8 @@ def train(
         training_data = self.featurize_for_training(training_trackers, domain, **kwargs)
 
         X, y = self._extract_training_data(training_data)
-        model = self.model_architecture(**kwargs)
+        self._train_params.update(kwargs)
+        model = self.model_architecture(**self._train_params)
         score = None
         # Note: clone is called throughout to avoid mutating default
         # arguments.
diff --git a/tests/core/test_policies.py b/tests/core/test_policies.py
index 8a0eb69bd087..fb5ddaf8ce4c 100644
--- a/tests/core/test_policies.py
+++ b/tests/core/test_policies.py
@@ -295,6 +295,12 @@ def tracker(self, default_domain):
     async def trackers(self, default_domain):
         return await train_trackers(default_domain, augmentation_factor=20)
 
+    def test_additional_train_args_do_not_raise(
+        self, mock_search, default_domain, trackers, featurizer, priority
+    ):
+        policy = self.create_policy(featurizer=featurizer, priority=priority, cv=None)
+        policy.train(trackers, domain=default_domain, this_is_not_a_feature=True)
+
     def test_cv_none_does_not_trigger_search(
         self, mock_search, default_domain, trackers, featurizer, priority
     ):
