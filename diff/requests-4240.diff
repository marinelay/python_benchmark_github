diff --git a/HISTORY.rst b/HISTORY.rst
index de6ba5c428..4d77d189c3 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -7,6 +7,7 @@ dev
 +++
 
 **Improvements**
+- Error messages for invalid headers now include the header name for easier debugging
 
 **Bugfixes**
 
diff --git a/requests/utils.py b/requests/utils.py
index 1e4960d714..5c47de9893 100644
--- a/requests/utils.py
+++ b/requests/utils.py
@@ -868,8 +868,8 @@ def check_header_validity(header):
         if not pat.match(value):
             raise InvalidHeader("Invalid return character or leading space in header: %s" % name)
     except TypeError:
-        raise InvalidHeader("Header value %s must be of type str or bytes, "
-                            "not %s" % (value, type(value)))
+        raise InvalidHeader("Value for header {%s: %s} must be of type str or "
+                            "bytes, not %s" % (name, value, type(value)))
 
 
 def urldefragauth(url):
diff --git a/tests/test_requests.py b/tests/test_requests.py
index 7ef6bfeeae..a2b2213f56 100644
--- a/tests/test_requests.py
+++ b/tests/test_requests.py
@@ -1401,14 +1401,17 @@ def test_header_value_not_str(self, httpbin):
         headers_list = {'baz': ['foo', 'bar']}
 
         # Test for int
-        with pytest.raises(InvalidHeader):
+        with pytest.raises(InvalidHeader) as excinfo:
             r = requests.get(httpbin('get'), headers=headers_int)
+        assert 'foo' in str(excinfo.value)
         # Test for dict
-        with pytest.raises(InvalidHeader):
+        with pytest.raises(InvalidHeader) as excinfo:
             r = requests.get(httpbin('get'), headers=headers_dict)
+        assert 'bar' in str(excinfo.value)
         # Test for list
-        with pytest.raises(InvalidHeader):
+        with pytest.raises(InvalidHeader) as excinfo:
             r = requests.get(httpbin('get'), headers=headers_list)
+        assert 'baz' in str(excinfo.value)
 
     def test_header_no_return_chars(self, httpbin):
         """Ensure that a header containing return character sequences raise an
