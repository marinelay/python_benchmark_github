diff --git a/salt/modules/linux_sysctl.py b/salt/modules/linux_sysctl.py
index 306589510e7de..0bf4bccd0c0fd 100644
--- a/salt/modules/linux_sysctl.py
+++ b/salt/modules/linux_sysctl.py
@@ -1,10 +1,7 @@
-# -*- coding: utf-8 -*-
 """
 Module for viewing and modifying sysctl parameters
 """
-from __future__ import absolute_import, print_function, unicode_literals
 
-# Import python libs
 import logging
 import os
 import re
@@ -15,8 +12,6 @@
 import salt.utils.stringutils
 import salt.utils.systemd
 from salt.exceptions import CommandExecutionError
-
-# Import salt libs
 from salt.ext import six
 from salt.ext.six import string_types
 
@@ -66,8 +61,8 @@ def show(config_file=False):
     """
     Return a list of sysctl parameters for this minion
 
-    :param config_file: Pull data from the system configuration file
-                        instead of the live kernel.
+    config: Pull the data from the system configuration file
+        instead of the live data.
 
     CLI Example:
 
@@ -94,7 +89,7 @@ def show(config_file=False):
                         key = key.strip()
                         value = value.lstrip()
                         ret[key] = value
-        except (OSError, IOError):
+        except OSError:
             log.error("Could not open sysctl file")
             return None
     else:
@@ -108,41 +103,32 @@ def show(config_file=False):
     return ret
 
 
-def get(name, ignore=False):
+def get(name):
     """
     Return a single sysctl parameter for this minion
 
-    :param name: Name of sysctl setting
-    :param ignore: Optional boolean to pass --ignore to sysctl (Default: False)
-
     CLI Example:
 
     .. code-block:: bash
 
         salt '*' sysctl.get net.ipv4.ip_forward
     """
-    cmd = "sysctl -n {0}".format(name)
-    if ignore:
-        cmd += " --ignore"
+    cmd = "sysctl -n {}".format(name)
     out = __salt__["cmd.run"](cmd, python_shell=False)
     return out
 
 
-def assign(name, value, ignore=False):
+def assign(name, value):
     """
     Assign a single sysctl parameter for this minion
 
-    :param name: Name of sysctl setting
-    :param value: Desired value of sysctl setting
-    :param ignore: Optional boolean to pass --ignore to sysctl (Default: False)
-
     CLI Example:
 
     .. code-block:: bash
 
         salt '*' sysctl.assign net.ipv4.ip_forward 1
     """
-    value = six.text_type(value)
+    value = str(value)
 
     if six.PY3:
         tran_tab = name.translate("".maketrans("./", "/."))
@@ -155,14 +141,12 @@ def assign(name, value, ignore=False):
         # pylint: enable=incompatible-py3-code,undefined-variable
         tran_tab = name.translate(trans_args)
 
-    sysctl_file = "/proc/sys/{0}".format(tran_tab)
-    if not ignore and not os.path.exists(sysctl_file):
-        raise CommandExecutionError("sysctl {0} does not exist".format(name))
+    sysctl_file = "/proc/sys/{}".format(tran_tab)
+    if not os.path.exists(sysctl_file):
+        raise CommandExecutionError("sysctl {} does not exist".format(name))
 
     ret = {}
-    cmd = 'sysctl -w {0}="{1}"'.format(name, value)
-    if ignore:
-        cmd += " --ignore"
+    cmd = 'sysctl -w {}="{}"'.format(name, value)
     data = __salt__["cmd.run_all"](cmd, python_shell=False)
     out = data["stdout"]
     err = data["stderr"]
@@ -170,33 +154,25 @@ def assign(name, value, ignore=False):
     # Example:
     #    # sysctl -w net.ipv4.tcp_rmem="4096 87380 16777216"
     #    net.ipv4.tcp_rmem = 4096 87380 16777216
-    regex = re.compile(r"^{0}\s+=\s+{1}$".format(re.escape(name), re.escape(value)))
+    regex = re.compile(r"^{}\s+=\s+{}$".format(re.escape(name), re.escape(value)))
 
-    if not regex.match(out) or "Invalid argument" in six.text_type(err):
+    if not regex.match(out) or "Invalid argument" in str(err):
         if data["retcode"] != 0 and err:
             error = err
-        elif ignore:
-            ret[name] = "ignored"
-            return ret
         else:
             error = out
-        raise CommandExecutionError("sysctl -w failed: {0}".format(error))
+        raise CommandExecutionError("sysctl -w failed: {}".format(error))
     new_name, new_value = out.split(" = ", 1)
     ret[new_name] = new_value
     return ret
 
 
-def persist(name, value, config=None, ignore=False):
+def persist(name, value, config=None):
     """
     Assign and persist a simple sysctl parameter for this minion. If ``config``
     is not specified, a sensible default will be chosen using
     :mod:`sysctl.default_config <salt.modules.linux_sysctl.default_config>`.
 
-    :param name: Name of sysctl setting
-    :param value: Desired value of sysctl setting
-    :param config: Optional path to sysctl.conf
-    :param ignore: Optional boolean to pass --ignore to sysctl (Default: False)
-
     CLI Example:
 
     .. code-block:: bash
@@ -214,7 +190,7 @@ def persist(name, value, config=None, ignore=False):
         try:
             with salt.utils.files.fopen(config, "w+") as _fh:
                 _fh.write("#\n# Kernel sysctl configuration\n#\n")
-        except (IOError, OSError):
+        except OSError:
             msg = "Could not write to file: {0}"
             raise CommandExecutionError(msg.format(config))
 
@@ -226,7 +202,7 @@ def persist(name, value, config=None, ignore=False):
             # and it seems unnecessary to indent the below for
             # loop since it is a fairly large block of code.
             config_data = salt.utils.data.decode(_fh.readlines())
-    except (IOError, OSError):
+    except OSError:
         msg = "Could not read from file: {0}"
         raise CommandExecutionError(msg.format(config))
 
@@ -257,30 +233,27 @@ def persist(name, value, config=None, ignore=False):
             continue
         if name == comps[0]:
             # This is the line to edit
-            if six.text_type(comps[1]) == six.text_type(value):
+            if str(comps[1]) == str(value):
                 # It is correct in the config, check if it is correct in /proc
-                current_setting = get(name, ignore)
-                if not current_setting:
-                    return "Ignored"
-                if six.text_type(current_setting) != six.text_type(value):
-                    assign(name, value, ignore)
+                if str(get(name)) != str(value):
+                    assign(name, value)
                     return "Updated"
                 else:
                     return "Already set"
 
-            nlines.append("{0} = {1}\n".format(name, value))
+            nlines.append("{} = {}\n".format(name, value))
             edited = True
             continue
         else:
             nlines.append(line)
     if not edited:
-        nlines.append("{0} = {1}\n".format(name, value))
+        nlines.append("{} = {}\n".format(name, value))
     try:
         with salt.utils.files.fopen(config, "wb") as _fh:
             _fh.writelines(salt.utils.data.encode(nlines))
-    except (IOError, OSError):
+    except OSError:
         msg = "Could not write to file: {0}"
         raise CommandExecutionError(msg.format(config))
 
-    assign(name, value, ignore)
+    assign(name, value)
     return "Updated"
diff --git a/salt/states/sysctl.py b/salt/states/sysctl.py
index 12b8743a8db9e..3c471eaaf17cb 100644
--- a/salt/states/sysctl.py
+++ b/salt/states/sysctl.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Configuration of the kernel using sysctl
 ========================================
@@ -11,17 +10,11 @@
     sysctl.present:
       - value: 20
 """
-from __future__ import absolute_import, print_function, unicode_literals
 
-# Import python libs
 import re
 
-# Import salt libs
 from salt.exceptions import CommandExecutionError
 
-# Import 3rd part libs
-from salt.ext import six
-
 
 def __virtual__():
     """
@@ -32,7 +25,7 @@ def __virtual__():
     return (False, "sysctl module could not be loaded")
 
 
-def present(name, value, config=None, ignore=False):
+def present(name, value, config=None):
     """
     Ensure that the named sysctl value is set in memory and persisted to the
     named configuration file. The default sysctl configuration file is
@@ -47,13 +40,6 @@ def present(name, value, config=None, ignore=False):
     config
         The location of the sysctl configuration file. If not specified, the
         proper location will be detected based on platform.
-
-    ignore
-        .. versionadded:: 3001
-
-        Adds --ignore to sysctl commands. This suppresses errors in environments
-        where sysctl settings may have been disabled in kernel boot configuration.
-        Defaults to False
     """
     ret = {"name": name, "result": True, "changes": {}, "comment": ""}
 
@@ -71,17 +57,17 @@ def present(name, value, config=None, ignore=False):
         if configured is None:
             ret["result"] = None
             ret["comment"] = (
-                "Sysctl option {0} might be changed, we failed to check "
-                "config file at {1}. The file is either unreadable, or "
+                "Sysctl option {} might be changed, we failed to check "
+                "config file at {}. The file is either unreadable, or "
                 "missing.".format(name, config)
             )
             return ret
         if name in current and name not in configured:
             if re.sub(" +|\t+", " ", current[name]) != re.sub(
-                " +|\t+", " ", six.text_type(value)
+                " +|\t+", " ", str(value)
             ):
                 ret["result"] = None
-                ret["comment"] = "Sysctl option {0} set to be changed to {1}".format(
+                ret["comment"] = "Sysctl option {} set to be changed to {}".format(
                     name, value
                 )
                 return ret
@@ -89,8 +75,8 @@ def present(name, value, config=None, ignore=False):
                 ret["result"] = None
                 ret["comment"] = (
                     "Sysctl value is currently set on the running system but "
-                    "not in a config file. Sysctl option {0} set to be "
-                    "changed to {1} in config file.".format(name, value)
+                    "not in a config file. Sysctl option {} set to be "
+                    "changed to {} in config file.".format(name, value)
                 )
                 return ret
         elif name in configured and name not in current:
@@ -102,30 +88,28 @@ def present(name, value, config=None, ignore=False):
             )
             return ret
         elif name in configured and name in current:
-            if six.text_type(value).split() == __salt__["sysctl.get"](name).split():
+            if str(value).split() == __salt__["sysctl.get"](name).split():
                 ret["result"] = True
-                ret["comment"] = "Sysctl value {0} = {1} is already set".format(
+                ret["comment"] = "Sysctl value {} = {} is already set".format(
                     name, value
                 )
                 return ret
         # otherwise, we don't have it set anywhere and need to set it
         ret["result"] = None
-        ret["comment"] = "Sysctl option {0} would be changed to {1}".format(name, value)
+        ret["comment"] = "Sysctl option {} would be changed to {}".format(name, value)
         return ret
 
     try:
-        update = __salt__["sysctl.persist"](name, value, config, ignore)
+        update = __salt__["sysctl.persist"](name, value, config)
     except CommandExecutionError as exc:
         ret["result"] = False
-        ret["comment"] = "Failed to set {0} to {1}: {2}".format(name, value, exc)
+        ret["comment"] = "Failed to set {} to {}: {}".format(name, value, exc)
         return ret
 
     if update == "Updated":
         ret["changes"] = {name: value}
-        ret["comment"] = "Updated sysctl value {0} = {1}".format(name, value)
+        ret["comment"] = "Updated sysctl value {} = {}".format(name, value)
     elif update == "Already set":
-        ret["comment"] = "Sysctl value {0} = {1} is already set".format(name, value)
-    elif update == "Ignored":
-        ret["comment"] = "Sysctl value {0} = {1} was ignored".format(name, value)
+        ret["comment"] = "Sysctl value {} = {} is already set".format(name, value)
 
     return ret
diff --git a/tests/unit/modules/test_linux_sysctl.py b/tests/unit/modules/test_linux_sysctl.py
index 90db8e369185c..7f463bb7ab068 100644
--- a/tests/unit/modules/test_linux_sysctl.py
+++ b/tests/unit/modules/test_linux_sysctl.py
@@ -1,17 +1,11 @@
-# -*- coding: utf-8 -*-
 """
     :codeauthor: jmoney <justin@saltstack.com>
 """
 
-# Import Python libs
-from __future__ import absolute_import, print_function, unicode_literals
 
-# Import Salt Libs
 import salt.modules.linux_sysctl as linux_sysctl
 import salt.modules.systemd_service as systemd
 from salt.exceptions import CommandExecutionError
-
-# Import Salt Testing Libs
 from tests.support.mixins import LoaderModuleMockMixin
 from tests.support.mock import MagicMock, mock_open, patch
 from tests.support.unit import TestCase
@@ -33,14 +27,6 @@ def test_get(self):
         with patch.dict(linux_sysctl.__salt__, {"cmd.run": mock_cmd}):
             self.assertEqual(linux_sysctl.get("net.ipv4.ip_forward"), 1)
 
-    def test_get_ignore(self):
-        """
-        Tests the return of get function with ignore
-        """
-        mock_cmd = MagicMock(return_value="")
-        with patch.dict(linux_sysctl.__salt__, {"cmd.run": mock_cmd}):
-            self.assertEqual(linux_sysctl.get("net.ipv4.ip_forward", ignore=True), "")
-
     def test_assign_proc_sys_failed(self):
         """
         Tests if /proc/sys/<kernel-subsystem> exists or not
@@ -94,19 +80,6 @@ def test_assign_success(self):
             with patch.dict(linux_sysctl.__salt__, {"cmd.run_all": mock_cmd}):
                 self.assertEqual(linux_sysctl.assign("net.ipv4.ip_forward", 1), ret)
 
-    def test_assign_ignore(self):
-        """
-        Tests the ignore assign function
-        """
-        with patch("os.path.exists", MagicMock(return_value=True)):
-            cmd = {"pid": 1337, "retcode": 0, "stderr": "", "stdout": ""}
-            ret = {"net.ipv4.ip_forward": "ignored"}
-            mock_cmd = MagicMock(return_value=cmd)
-            with patch.dict(linux_sysctl.__salt__, {"cmd.run_all": mock_cmd}):
-                self.assertEqual(
-                    linux_sysctl.assign("net.ipv4.ip_forward", 1, ignore=True), ret
-                )
-
     def test_persist_no_conf_failure(self):
         """
         Tests adding of config file failure
diff --git a/tests/unit/states/test_sysctl.py b/tests/unit/states/test_sysctl.py
index b17fd5332d822..f080c9c06e9b8 100644
--- a/tests/unit/states/test_sysctl.py
+++ b/tests/unit/states/test_sysctl.py
@@ -1,15 +1,9 @@
-# -*- coding: utf-8 -*-
 """
     :codeauthor: Jayesh Kariya <jayeshk@saltstack.com>
 """
-# Import Python libs
-from __future__ import absolute_import, print_function, unicode_literals
 
-# Import Salt Libs
 import salt.states.sysctl as sysctl
 from salt.exceptions import CommandExecutionError
-
-# Import Salt Testing Libs
 from tests.support.mixins import LoaderModuleMockMixin
 from tests.support.mock import MagicMock, patch
 from tests.support.unit import TestCase
@@ -35,22 +29,20 @@ def test_present(self):
         config = "/etc/sysctl.conf"
 
         comment = (
-            "Sysctl option {0} might be changed, we failed to check "
-            "config file at {1}. The file is either unreadable, or "
+            "Sysctl option {} might be changed, we failed to check "
+            "config file at {}. The file is either unreadable, or "
             "missing.".format(name, config)
         )
 
         ret = {"name": name, "result": None, "changes": {}, "comment": comment}
 
-        comment_empty = "Sysctl option {0} would be changed to {1}" "".format(
-            name, value
-        )
+        comment_empty = "Sysctl option {} would be changed to {}" "".format(name, value)
 
-        comment1 = "Sysctl option {0} set to be changed to {1}".format(name, value)
+        comment1 = "Sysctl option {} set to be changed to {}".format(name, value)
 
         comment2 = (
             "Sysctl value is currently set on the running system but "
-            "not in a config file. Sysctl option {0} set to be "
+            "not in a config file. Sysctl option {} set to be "
             "changed to 2 in config file.".format(name)
         )
 
@@ -60,15 +52,13 @@ def test_present(self):
             "changed to {1}".format(name, value)
         )
 
-        comt4 = "Sysctl value {0} = {1} is already set".format(name, value)
-
-        comt5 = "Sysctl option {0} would be changed to {1}".format(name, value)
+        comt4 = "Sysctl value {} = {} is already set".format(name, value)
 
-        comt6 = "Failed to set {0} to {1}: ".format(name, value)
+        comt5 = "Sysctl option {} would be changed to {}".format(name, value)
 
-        comt7 = "Sysctl value {0} = {1} is already set".format(name, value)
+        comt6 = "Failed to set {} to {}: ".format(name, value)
 
-        comt8 = "Sysctl value {0} = {1} was ignored".format(name, value)
+        comt7 = "Sysctl value {} = {} is already set".format(name, value)
 
         def mock_current(config_file=None):
             """
@@ -137,8 +127,3 @@ def mock_both(config_file=None):
             with patch.dict(sysctl.__salt__, {"sysctl.persist": mock}):
                 ret.update({"comment": comt7, "result": True})
                 self.assertDictEqual(sysctl.present(name, value), ret)
-
-            mock = MagicMock(return_value="Ignored")
-            with patch.dict(sysctl.__salt__, {"sysctl.persist": mock}):
-                ret.update({"comment": comt8, "result": True})
-                self.assertDictEqual(sysctl.present(name, value), ret)
