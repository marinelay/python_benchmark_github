diff --git a/salt/state.py b/salt/state.py
index 588bc85fb4dc0..8bfba6e5fae92 100644
--- a/salt/state.py
+++ b/salt/state.py
@@ -2215,7 +2215,7 @@ def call(self, low, chunks=None, running=None, retries=1):
             else:
                 ret["comment"] = "  ".join(
                     [
-                        "" if not ret["comment"] else ret["comment"],
+                        "" if not ret["comment"] else six.text_type(ret["comment"]),
                         (
                             "The state would be retried every {1} seconds "
                             "(with a splay of up to {3} seconds) "
diff --git a/tests/unit/test_state.py b/tests/unit/test_state.py
index f5748af5948ee..4b053f664075f 100644
--- a/tests/unit/test_state.py
+++ b/tests/unit/test_state.py
@@ -231,6 +231,48 @@ def test_verify_unless_parse_slots(self, name):
             return_result = state_obj._run_check_unless(low_data, "")
             self.assertEqual(expected_result, return_result)
 
+    def test_verify_retry_parsing(self):
+        low_data = {
+            "state": "file",
+            "name": "/tmp/saltstack.README.rst",
+            "__sls__": "demo.download",
+            "__env__": "base",
+            "__id__": "download sample data",
+            "retry": {"attempts": 5, "interval": 5},
+            "unless": ["test -f /tmp/saltstack.README.rst"],
+            "source": [
+                "https://raw.githubusercontent.com/saltstack/salt/develop/README.rst"
+            ],
+            "source_hash": "f2bc8c0aa2ae4f5bb5c2051686016b48",
+            "order": 10000,
+            "fun": "managed",
+        }
+        expected_result = {
+            "__id__": "download sample data",
+            "__run_num__": 0,
+            "__sls__": "demo.download",
+            "changes": {},
+            "comment": "['unless condition is true']  The state would be retried every 5 "
+            "seconds (with a splay of up to 0 seconds) a maximum of 5 times or "
+            "until a result of True is returned",
+            "name": "/tmp/saltstack.README.rst",
+            "result": True,
+            "skip_watch": True,
+        }
+
+        with patch("salt.state.State._gather_pillar") as state_patch:
+            minion_opts = self.get_temp_config("minion")
+            minion_opts["test"] = True
+            minion_opts["file_client"] = "local"
+            state_obj = salt.state.State(minion_opts)
+            mock = {
+                "result": True,
+                "comment": ["unless condition is true"],
+                "skip_watch": True,
+            }
+            with patch.object(state_obj, "_run_check", return_value=mock):
+                self.assertDictContainsSubset(expected_result, state_obj.call(low_data))
+
 
 class HighStateTestCase(TestCase, AdaptedConfigurationTestCaseMixin):
     def setUp(self):
