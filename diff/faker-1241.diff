diff --git a/faker/proxy.py b/faker/proxy.py
index cb64f6473..67f261efe 100644
--- a/faker/proxy.py
+++ b/faker/proxy.py
@@ -30,9 +30,10 @@ def __init__(self, locale=None, providers=None,
         # This guarantees a FIFO ordering of elements in `locales` based on the final
         # locale string while discarding duplicates after processing
         elif isinstance(locale, (list, tuple, set)):
-            assert all(isinstance(local_code, str) for local_code in locale)
             locales = []
             for code in locale:
+                if not isinstance(code, str):
+                    raise TypeError('The locale "%s" must be a string.' % str(code))
                 final_locale = code.replace('-', '_')
                 if final_locale not in locales:
                     locales.append(final_locale)
diff --git a/tests/test_proxy.py b/tests/test_proxy.py
index a565f0d86..2b48d2bfd 100644
--- a/tests/test_proxy.py
+++ b/tests/test_proxy.py
@@ -37,6 +37,12 @@ def test_locale_as_list(self):
         assert fake.locales == expected
         assert len(fake.factories) == len(expected)
 
+    def test_locale_as_list_invalid_value_type(self):
+        locale = [1, 2]
+        with pytest.raises(TypeError) as exc:
+            Faker(locale)
+        assert str(exc.value) == 'The locale "1" must be a string.'
+
     def test_locale_as_ordereddict(self):
         locale = OrderedDict([
             ('de_DE', 3),
