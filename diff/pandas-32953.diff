diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 692df075f25cb..d00a739004fc3 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -385,8 +385,10 @@ Reshaping
 - :meth:`DataFrame.replace` and :meth:`Series.replace` will raise a ``TypeError`` if ``to_replace`` is not an expected type. Previously the ``replace`` would fail silently (:issue:`18634`)
 - Bug in :meth:`DataFrame.apply` where callback was called with :class:`Series` parameter even though ``raw=True`` requested. (:issue:`32423`)
 - Bug in :meth:`DataFrame.pivot_table` losing timezone information when creating a :class:`MultiIndex` level from a column with timezone-aware dtype (:issue:`32558`)
+- Bug in :meth:`concat` where when passing a non-dict mapping as ``objs`` would raise a ``TypeError`` (:issue:`32863`)
 - :meth:`DataFrame.agg` now provides more descriptive ``SpecificationError`` message when attempting to aggregating non-existant column (:issue:`32755`)
 
+
 Sparse
 ^^^^^^
 - Creating a :class:`SparseArray` from timezone-aware dtype will issue a warning before dropping timezone information, instead of doing so silently (:issue:`32501`)
diff --git a/pandas/conftest.py b/pandas/conftest.py
index 903e1a5dec132..9f8039ca4003f 100644
--- a/pandas/conftest.py
+++ b/pandas/conftest.py
@@ -309,7 +309,7 @@ def __init__(self, *args, **kwargs):
 
 
 @pytest.fixture
-def non_mapping_dict_subclass():
+def non_dict_mapping_subclass():
     """
     Fixture for a non-mapping dictionary subclass.
     """
diff --git a/pandas/core/reshape/concat.py b/pandas/core/reshape/concat.py
index 091129707228f..b4497ce1780e6 100644
--- a/pandas/core/reshape/concat.py
+++ b/pandas/core/reshape/concat.py
@@ -2,6 +2,7 @@
 Concat routines.
 """
 
+from collections import abc
 from typing import Iterable, List, Mapping, Union, overload
 
 import numpy as np
@@ -85,7 +86,7 @@ def concat(
     Parameters
     ----------
     objs : a sequence or mapping of Series or DataFrame objects
-        If a dict is passed, the sorted keys will be used as the `keys`
+        If a mapping is passed, the sorted keys will be used as the `keys`
         argument, unless it is passed, in which case the values will be
         selected (see below). Any None objects will be dropped silently unless
         they are all None in which case a ValueError will be raised.
@@ -315,7 +316,7 @@ def __init__(
                 "Only can inner (intersect) or outer (union) join the other axis"
             )
 
-        if isinstance(objs, dict):
+        if isinstance(objs, abc.Mapping):
             if keys is None:
                 keys = list(objs.keys())
             objs = [objs[k] for k in keys]

# objs.__class__.__bases__로 현재 어떤 타입을 상속받고 있는지 알 수 있다
# 특정 파일의 클래스타입은 이걸 이용하면 될듯? 
# abc.Mapping은 dict와 같으니 isinstance(objs, dict)의 semantic을 이용한다?

diff --git a/pandas/tests/reshape/test_concat.py b/pandas/tests/reshape/test_concat.py
index afd8f4178f741..a12395b32ab4e 100644
--- a/pandas/tests/reshape/test_concat.py
+++ b/pandas/tests/reshape/test_concat.py
@@ -1220,13 +1220,17 @@ def test_concat_series_partial_columns_names(self):
         expected = DataFrame({0: [1, 2], 1: [1, 2], 2: [4, 5]})
         tm.assert_frame_equal(result, expected)
 
-    def test_concat_dict(self):
-        frames = {
-            "foo": DataFrame(np.random.randn(4, 3)),
-            "bar": DataFrame(np.random.randn(4, 3)),
-            "baz": DataFrame(np.random.randn(4, 3)),
-            "qux": DataFrame(np.random.randn(4, 3)),
-        }
+    @pytest.mark.parametrize("mapping", ["mapping", "dict"])
+    def test_concat_mapping(self, mapping, non_dict_mapping_subclass):
+        constructor = dict if mapping == "dict" else non_dict_mapping_subclass
+        frames = constructor(
+            {
+                "foo": DataFrame(np.random.randn(4, 3)),
+                "bar": DataFrame(np.random.randn(4, 3)),
+                "baz": DataFrame(np.random.randn(4, 3)),
+                "qux": DataFrame(np.random.randn(4, 3)),
+            }
+        )
 
         sorted_keys = list(frames.keys())
 
diff --git a/pandas/tests/series/test_apply.py b/pandas/tests/series/test_apply.py
index 3c2cb5275f3a8..15a71e1b45421 100644
--- a/pandas/tests/series/test_apply.py
+++ b/pandas/tests/series/test_apply.py
@@ -631,19 +631,19 @@ class DictWithoutMissing(dict):
         expected = Series([np.nan, np.nan, "three"])
         tm.assert_series_equal(result, expected)
 
-    def test_map_abc_mapping(self, non_mapping_dict_subclass):
+    def test_map_abc_mapping(self, non_dict_mapping_subclass):
         # https://github.com/pandas-dev/pandas/issues/29733
         # Check collections.abc.Mapping support as mapper for Series.map
         s = Series([1, 2, 3])
-        not_a_dictionary = non_mapping_dict_subclass({3: "three"})
+        not_a_dictionary = non_dict_mapping_subclass({3: "three"})
         result = s.map(not_a_dictionary)
         expected = Series([np.nan, np.nan, "three"])
         tm.assert_series_equal(result, expected)
 
-    def test_map_abc_mapping_with_missing(self, non_mapping_dict_subclass):
+    def test_map_abc_mapping_with_missing(self, non_dict_mapping_subclass):
         # https://github.com/pandas-dev/pandas/issues/29733
         # Check collections.abc.Mapping support as mapper for Series.map
-        class NonDictMappingWithMissing(non_mapping_dict_subclass):
+        class NonDictMappingWithMissing(non_dict_mapping_subclass):
             def __missing__(self, key):
                 return "missing"
 
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index e4c25f31c4b43..55af7355258a8 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -1124,9 +1124,9 @@ def test_constructor_dict_tuple_indexer(self):
         )
         tm.assert_series_equal(result, expected)
 
-    def test_constructor_mapping(self, non_mapping_dict_subclass):
+    def test_constructor_mapping(self, non_dict_mapping_subclass):
         # GH 29788
-        ndm = non_mapping_dict_subclass({3: "three"})
+        ndm = non_dict_mapping_subclass({3: "three"})
         result = Series(ndm)
         expected = Series(["three"], index=[3])
 
