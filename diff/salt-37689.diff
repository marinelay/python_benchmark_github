diff --git a/salt/cloud/clouds/joyent.py b/salt/cloud/clouds/joyent.py
index 722ec0cdc1a95..8aed7561a9400 100644
--- a/salt/cloud/clouds/joyent.py
+++ b/salt/cloud/clouds/joyent.py
@@ -222,9 +222,8 @@ def _query_ip_address():
         )
     except (SaltCloudExecutionTimeout, SaltCloudExecutionFailure) as exc:
         try:
-            # It might be already up, let's destroy it!
+            # destroy(vm_['name'])
             pass
-            #destroy(vm_['name'])
         except SaltCloudSystemExit:
             pass
         finally:
@@ -304,18 +303,9 @@ def create(vm_):
         transport=__opts__['transport']
     )
 
-    try:
-        data = create_node(**kwargs)
-    except Exception as exc:
-        log.error(
-            'Error creating {0} on JOYENT\n\n'
-            'The following exception was thrown when trying to '
-            'run the initial deployment: \n{1}'.format(
-                vm_['name'], str(exc)
-            ),
-            # Show the traceback if the debug logging level is enabled
-            exc_info_on_loglevel=logging.DEBUG
-        )
+    data = create_node(**kwargs)
+    if data == {}:
+        log.error('Error creating {0} on JOYENT'.format(vm_['name']))
         return False
 
     query_instance(vm_)
@@ -361,14 +351,13 @@ def create_node(**kwargs):
         create_data['networks'] = networks
     data = json.dumps(create_data)
 
-    try:
-        ret = query(command='/my/machines', data=data, method='POST',
-                     location=location)
-        if ret[0] in VALID_RESPONSE_CODES:
-            return ret[1]
-    except Exception as exc:
+    ret = query(command='/my/machines', data=data, method='POST',
+                location=location)
+    if ret[0] in VALID_RESPONSE_CODES:
+        return ret[1]
+    else:
         log.error(
-            'Failed to create node {0}: {1}'.format(name, exc)
+            'Failed to create node {0}: {1}'.format(name, ret[1])
         )
 
     return {}
@@ -407,7 +396,7 @@ def destroy(name, call=None):
 
     node = get_node(name)
     ret = query(command='my/machines/{0}'.format(node['id']),
-                 location=node['location'], method='DELETE')
+                location=node['location'], method='DELETE')
 
     __utils__['cloud.fire_event'](
         'event',
@@ -512,7 +501,7 @@ def take_action(name=None, call=None, command=None, data=None, method='GET',
     try:
 
         ret = query(command=command, data=data, method=method,
-                     location=location)
+                    location=location)
         log.info('Success {0} for node {1}'.format(caller, name))
     except Exception as exc:
         if 'InvalidState' in str(exc):
@@ -741,7 +730,7 @@ def list_nodes(full=False, call=None):
     if POLL_ALL_LOCATIONS:
         for location in JOYENT_LOCATIONS:
             result = query(command='my/machines', location=location,
-                            method='GET')
+                           method='GET')
             nodes = result[1]
             for node in nodes:
                 if 'name' in node:
@@ -750,7 +739,7 @@ def list_nodes(full=False, call=None):
 
     else:
         result = query(command='my/machines', location=DEFAULT_LOCATION,
-                        method='GET')
+                       method='GET')
         nodes = result[1]
         for node in nodes:
             if 'name' in node:
@@ -1103,6 +1092,9 @@ def query(action=None,
             result['status']
         )
     )
+    if 'headers' not in result:
+        return [result['status'], result['error']]
+
     if 'Content-Length' in result['headers']:
         content = result['text']
         return_content = yaml.safe_load(content)
diff --git a/tests/unit/cloud/clouds/joyent_test.py b/tests/unit/cloud/clouds/joyent_test.py
index 35a9b301b3c56..3a2b821b7e277 100644
--- a/tests/unit/cloud/clouds/joyent_test.py
+++ b/tests/unit/cloud/clouds/joyent_test.py
@@ -5,12 +5,18 @@
 
 # Import Salt Libs
 from __future__ import absolute_import
+import json
 
 # Import Salt Testing Libs
 from salttesting import TestCase, skipIf
 from salttesting.helpers import ensure_in_syspath
-from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
-
+from salttesting.mock import (
+    MagicMock,
+    mock_open,
+    patch,
+    NO_MOCK,
+    NO_MOCK_REASON
+)
 
 # Import Salt Libs
 from salt.cloud.clouds import joyent
@@ -42,14 +48,24 @@ class JoyentTestCase(TestCase):
     Unit TestCase for the salt.cloud.clouds.joyent module
     '''
     joyent.__utils__ = {
-        'cloud.fire_event': MagicMock()
+        'cloud.fire_event': MagicMock(),
+        'cloud.bootstrap': MagicMock()
     }
     joyent.__opts__ = {
         'sock_dir': True,
         'transport': True,
-        'providers': {'my_joyent': {}}
+        'providers': {'my_joyent': {}},
+        'profiles': {'my_joyent': {}}
+    }
+    vm_ = {
+        'profile': 'my_joyent',
+        'name': 'vm3',
+        'driver': 'joyent',
+        'size': 'k4-highcpu-kvm-750M',
+        'image': 'freebsd10',
+        'location': 'us-east-1'
     }
-    vm_ = {'name': 'vm3', 'driver': 'joyent'}
+    joyent.__active_provider_name__ = 'my_joyent:joyent'
 
     @patch('salt.utils.cloud.wait_for_ip', fake_wait_for_ip)
     def test_query_instance_init(self):
@@ -85,6 +101,35 @@ def test_query_instance_ready(self):
         self.assertTrue(joyent.__utils__['cloud.fire_event'].called_once())
         self.assertEqual(result, '1.1.1.1')
 
+    @patch('salt.config.is_profile_configured', MagicMock(return_value=True))
+    @patch('salt.utils.fopen', mock_open())
+    @patch('Crypto.PublicKey.RSA.importKey', MagicMock())
+    @patch('Crypto.Signature.PKCS1_v1_5.new', MagicMock())
+    @patch('base64.b64encode', MagicMock())
+    def test_create_fail(self):
+        '''
+        Test behavior when node creation failed because of an invalid profile
+        option
+        '''
+        image = {'name': '39a87f12-034c-11e6-84f5-4316cc1fcaa0'}
+        size = {'name': 'k4-highcpu-kvm-750M'}
+        show_reply = {}
+        query_ret = {'error': 'Unable to create machine', 'status': 0}
+        with patch.object(joyent, 'get_image', return_value=image):
+            with patch.object(joyent, 'get_size', return_value=size):
+                with patch.object(joyent, 'show_instance', return_value=show_reply):
+                    with patch('salt.utils.http.query', return_value=query_ret) as http_mock:
+                        result = joyent.create(self.vm_)
+        self.assertEqual(http_mock.call_args[0],
+            ('https://us-east-1.api.joyentcloud.com//my/machines', 'POST'))
+        self.assertDictEqual(json.loads(http_mock.call_args[1]['data']), {
+            'image': '39a87f12-034c-11e6-84f5-4316cc1fcaa0',
+            'name': 'vm3',
+            'package': 'k4-highcpu-kvm-750M'
+        })
+        self.assertEqual(http_mock.call_args[1]['header_dict']['Content-Type'],
+            'application/json')
+        self.assertEqual(result, False)  # Deploy failed
 
 if __name__ == '__main__':
     from integration import run_tests
