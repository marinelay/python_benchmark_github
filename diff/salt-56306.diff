diff --git a/changelog/49572.fixed b/changelog/49572.fixed
new file mode 100644
index 0000000000000..0f21b025de515
--- /dev/null
+++ b/changelog/49572.fixed
@@ -0,0 +1 @@
+fix frequent rest_tornado non-fatal tracebacks
diff --git a/salt/netapi/rest_tornado/saltnado.py b/salt/netapi/rest_tornado/saltnado.py
index 730c45efb5a3e..2853f448bc055 100644
--- a/salt/netapi/rest_tornado/saltnado.py
+++ b/salt/netapi/rest_tornado/saltnado.py
@@ -1,4 +1,3 @@
-# encoding: utf-8
 """
 A non-blocking REST API for Salt
 ================================
@@ -186,7 +185,6 @@
 .. |500| replace:: internal server error
 """
 # Import Python libs
-from __future__ import absolute_import, print_function, unicode_literals
 
 # pylint: disable=import-error
 import cgi
@@ -200,7 +198,6 @@
 import salt.client
 
 # salt imports
-import salt.ext.six as six
 import salt.ext.tornado.escape
 import salt.ext.tornado.gen
 import salt.ext.tornado.httpserver
@@ -264,7 +261,7 @@ class Any(Future):
     """
 
     def __init__(self, futures):
-        super(Any, self).__init__()
+        super().__init__()
         for future in futures:
             future.add_done_callback(self.done_callback)
 
@@ -274,7 +271,7 @@ def done_callback(self, future):
             self.set_result(future)
 
 
-class EventListener(object):
+class EventListener:
     """
     Class responsible for listening to the salt master event bus and updating
     futures. This is the core of what makes this asynchronous, this allows us to do
@@ -392,7 +389,7 @@ def _handle_event_socket_recv(self, raw):
         mtag, data = self.event.unpack(raw, self.event.serial)
 
         # see if we have any futures that need this info:
-        for (tag, matcher), futures in six.iteritems(self.tag_map):
+        for (tag, matcher), futures in self.tag_map.items():
             try:
                 is_matched = matcher(mtag, tag)
             except Exception:  # pylint: disable=broad-except
@@ -771,12 +768,10 @@ def post(self):  # pylint: disable=arguments-differ
 
             if "groups" in token and token["groups"]:
                 user_groups = set(token["groups"])
-                eauth_groups = set(
-                    [i.rstrip("%") for i in eauth.keys() if i.endswith("%")]
-                )
+                eauth_groups = {i.rstrip("%") for i in eauth.keys() if i.endswith("%")}
 
                 for group in user_groups & eauth_groups:
-                    perms.extend(eauth["{0}%".format(group)])
+                    perms.extend(eauth["{}%".format(group)])
 
             perms = sorted(list(set(perms)))
         # If we can't find the creds, then they aren't authorized
@@ -958,7 +953,7 @@ def disbatch(self):
 
             # disbatch to the correct handler
             try:
-                chunk_ret = yield getattr(self, "_disbatch_{0}".format(low["client"]))(
+                chunk_ret = yield getattr(self, "_disbatch_{}".format(low["client"]))(
                     low
                 )
                 ret.append(chunk_ret)
@@ -966,9 +961,7 @@ def disbatch(self):
                 ret.append("Failed to authenticate")
                 break
             except Exception as ex:  # pylint: disable=broad-except
-                ret.append(
-                    "Unexpected exception while handling request: {0}".format(ex)
-                )
+                ret.append("Unexpected exception while handling request: {}".format(ex))
                 log.error("Unexpected exception while handling request:", exc_info=True)
 
         self.write(self.serialize({"return": ret}))
@@ -1048,9 +1041,7 @@ def subscribe_minion(minion):
             )
 
         # To ensure job_not_running and all_return are terminated by each other, communicate using a future
-        is_finished = salt.ext.tornado.gen.sleep(
-            self.application.opts["gather_job_timeout"]
-        )
+        is_finished = Future()
 
         # ping until the job is not running, while doing so, if we see new minions returning
         # that they are running the job, add them to the list
@@ -1067,7 +1058,7 @@ def more_todo():
             """
             Check if there are any more minions we are waiting on returns from
             """
-            return any(x is False for x in six.itervalues(minions))
+            return any(x is False for x in minions.values())
 
         # here we want to follow the behavior of LocalClient.get_iter_returns
         # namely we want to wait at least syndic_wait (assuming we are a syndic)
@@ -1122,7 +1113,8 @@ def job_not_running(self, jid, tgt, tgt_type, minions, is_finished):
         Return a future which will complete once jid (passed in) is no longer
         running on tgt
         """
-        ping_pub_data = yield self.saltclients["local"](
+        local_client = self.saltclients["local"]
+        ping_pub_data = yield local_client(
             tgt, "saltutil.find_job", [jid], tgt_type=tgt_type
         )
         ping_tag = tagify([ping_pub_data["jid"], "ret"], "job")
@@ -1135,18 +1127,15 @@ def job_not_running(self, jid, tgt, tgt_type, minions, is_finished):
                     tag=ping_tag,
                     timeout=self.application.opts["gather_job_timeout"],
                 )
-                f = yield Any([event, is_finished])
-                # When finished entire routine, cleanup other futures and return result
-                if f is is_finished:
-                    if not event.done():
-                        event.set_result(None)
-                    raise salt.ext.tornado.gen.Return(True)
-                event = f.result()
+                event = yield event
             except TimeoutException:
+                if not event.done():
+                    event.set_result(None)
+
                 if not minion_running:
                     raise salt.ext.tornado.gen.Return(True)
                 else:
-                    ping_pub_data = yield self.saltclients["local"](
+                    ping_pub_data = yield local_client(
                         tgt, "saltutil.find_job", [jid], tgt_type=tgt_type
                     )
                     ping_tag = tagify([ping_pub_data["jid"], "ret"], "job")
@@ -1615,15 +1604,15 @@ def get(self):
         self.set_header("Cache-Control", "no-cache")
         self.set_header("Connection", "keep-alive")
 
-        self.write("retry: {0}\n".format(400))
+        self.write("retry: {}\n".format(400))
         self.flush()
 
         while True:
             try:
                 event = yield self.application.event_listener.get_event(self)
-                self.write("tag: {0}\n".format(event.get("tag", "")))
+                self.write("tag: {}\n".format(event.get("tag", "")))
                 self.write(
-                    str("data: {0}\n\n").format(_json_dumps(event))
+                    "data: {}\n\n".format(_json_dumps(event))
                 )  # future lint: disable=blacklisted-function
                 self.flush()
             except TimeoutException:
diff --git a/tests/integration/netapi/rest_tornado/test_app.py b/tests/integration/netapi/rest_tornado/test_app.py
index 95d561d47c342..e3ad8820d30f8 100644
--- a/tests/integration/netapi/rest_tornado/test_app.py
+++ b/tests/integration/netapi/rest_tornado/test_app.py
@@ -1,6 +1,3 @@
-# -*- coding: utf-8 -*-
-from __future__ import absolute_import, print_function, unicode_literals
-
 import os
 import threading
 import time
@@ -8,12 +5,11 @@
 import pytest
 import salt.utils.json
 import salt.utils.stringutils
-from salt.ext import six
 from salt.netapi.rest_tornado import saltnado
 from salt.utils.versions import StrictVersion
 from salt.utils.zeromq import ZMQDefaultLoop as ZMQIOLoop
 from salt.utils.zeromq import zmq
-from tests.support.helpers import flaky, slowTest
+from tests.support.helpers import TstSuiteLoggingHandler, flaky, slowTest
 from tests.support.unit import skipIf
 from tests.unit.netapi.test_rest_tornado import SaltnadoTestCase
 
@@ -38,7 +34,7 @@ def mod_opts(self):
 @pytest.mark.usefixtures("salt_sub_minion")
 class TestSaltAPIHandler(_SaltnadoIntegrationTestCase):
     def setUp(self):
-        super(TestSaltAPIHandler, self).setUp()
+        super().setUp()
         os.environ["ASYNC_TEST_TIMEOUT"] = "300"
 
     def get_app(self):
@@ -84,7 +80,38 @@ def test_post_no_auth(self):
 
     # Local client tests
 
-    @skipIf(True, "to be re-enabled when #23623 is merged")
+    @slowTest
+    def test_regression_49572(self):
+        with TstSuiteLoggingHandler() as handler:
+            GATHER_JOB_TIMEOUT = 1
+            self.application.opts["gather_job_timeout"] = GATHER_JOB_TIMEOUT
+
+            low = [{"client": "local", "tgt": "*", "fun": "test.ping"}]
+            fetch_kwargs = {
+                "method": "POST",
+                "body": salt.utils.json.dumps(low),
+                "headers": {
+                    "Content-Type": self.content_type_map["json"],
+                    saltnado.AUTH_TOKEN_HEADER: self.token["token"],
+                },
+                "connect_timeout": 30,
+                "request_timeout": 30,
+            }
+
+            self.fetch("/", **fetch_kwargs)
+            time.sleep(GATHER_JOB_TIMEOUT + 0.1)  # ick
+
+            #  While the traceback is in the logs after the sleep without this
+            #  follow up fetch, the logging handler doesn't see it in its list
+            #  of messages unless something else runs.
+            self.fetch("/", **fetch_kwargs)
+
+            for message in handler.messages:
+                if "TypeError: 'NoneType' object is not iterable" in message:
+                    raise AssertionError(
+                        "#49572: regression: set_result on completed event"
+                    )
+
     def test_simple_local_post(self):
         """
         Test a basic API of /
@@ -138,7 +165,6 @@ def test_simple_local_post_no_tgt(self):
 
     # local client request body test
 
-    @skipIf(True, "Undetermined race condition in test. Temporarily disabled.")
     def test_simple_local_post_only_dictionary_request(self):
         """
         Test a basic API of /
@@ -417,7 +443,6 @@ def get_app(self):
         application.event_listener = saltnado.EventListener({}, self.opts)
         return application
 
-    @skipIf(True, "issue #34753")
     def test_get_no_mid(self):
         response = self.fetch(
             "/minions",
@@ -430,10 +455,9 @@ def test_get_no_mid(self):
         # one per minion
         self.assertEqual(len(response_obj["return"][0]), 2)
         # check a single grain
-        for minion_id, grains in six.iteritems(response_obj["return"][0]):
+        for minion_id, grains in response_obj["return"][0].items():
             self.assertEqual(minion_id, grains["id"])
 
-    @skipIf(True, "to be re-enabled when #23623 is merged")
     @slowTest
     def test_get(self):
         response = self.fetch(
@@ -523,7 +547,6 @@ def get_app(self):
         application.event_listener = saltnado.EventListener({}, self.opts)
         return application
 
-    @skipIf(True, "to be re-enabled when #23623 is merged")
     @slowTest
     def test_get(self):
         # test with no JID
@@ -537,7 +560,7 @@ def test_get(self):
         response = self.wait(timeout=30)
         response_obj = salt.utils.json.loads(response.body)["return"][0]
         try:
-            for jid, ret in six.iteritems(response_obj):
+            for jid, ret in response_obj.items():
                 self.assertIn("Function", ret)
                 self.assertIn("Target", ret)
                 self.assertIn("Target-type", ret)
@@ -549,9 +572,9 @@ def test_get(self):
             raise
 
         # test with a specific JID passed in
-        jid = next(six.iterkeys(response_obj))
+        jid = next(iter(response_obj.keys()))
         self.http_client.fetch(
-            self.get_url("/jobs/{0}".format(jid)),
+            self.get_url("/jobs/{}".format(jid)),
             self.stop,
             method="GET",
             headers={saltnado.AUTH_TOKEN_HEADER: self.token["token"]},
@@ -580,7 +603,6 @@ def get_app(self):
         application.event_listener = saltnado.EventListener({}, self.opts)
         return application
 
-    @skipIf(True, "to be re-enabled when #23623 is merged")
     @slowTest
     def test_get(self):
         low = [{"client": "local", "tgt": "*", "fun": "test.ping"}]
@@ -624,8 +646,7 @@ def _stop(self):
         self.stop()
 
     def on_event(self, event):
-        if six.PY3:
-            event = event.decode("utf-8")
+        event = event.decode("utf-8")
         if self.events_to_fire > 0:
             self.application.event_listener.event.fire_event(
                 {"foo": "bar", "baz": "qux"}, "salt/netapi/test"
@@ -700,9 +721,7 @@ def verify_event(future):
                 )
             self.assertEqual(event["tag"], "salt/netapi/hook")
             self.assertIn("headers", event["data"])
-            self.assertEqual(
-                event["data"]["post"], {"foo": salt.utils.stringutils.to_bytes("bar")}
-            )
+            self.assertEqual(event["data"]["post"], {"foo": "bar"})
         finally:
             self._future_resolved.clear()
             del self._future_resolved
diff --git a/tests/unit/netapi/test_rest_tornado.py b/tests/unit/netapi/test_rest_tornado.py
index 9b3fdff9e5ec6..7e81c542cb145 100644
--- a/tests/unit/netapi/test_rest_tornado.py
+++ b/tests/unit/netapi/test_rest_tornado.py
@@ -1,22 +1,13 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-
 import copy
 import hashlib
 import os
 import shutil
+from urllib.parse import urlencode, urlparse
 
 import salt.auth
 import salt.utils.event
 import salt.utils.json
 import salt.utils.yaml
-from salt.ext import six
-from salt.ext.six.moves import map, range  # pylint: disable=import-error
-from salt.ext.six.moves.urllib.parse import (  # pylint: disable=no-name-in-module
-    urlencode,
-    urlparse,
-)
 from tests.support.events import eventpublisher_process
 from tests.support.helpers import patched_environ, slowTest
 from tests.support.mixins import AdaptedConfigurationTestCaseMixin
@@ -45,10 +36,10 @@
     HAS_TORNADO = False
 
     # Create fake test case classes so we can properly skip the test case
-    class AsyncTestCase(object):
+    class AsyncTestCase:
         pass
 
-    class AsyncHTTPTestCase(object):
+    class AsyncHTTPTestCase:
         pass
 
 
@@ -103,13 +94,13 @@ def token(self):
         return self.auth.mk_token(self.auth_creds_dict)
 
     def setUp(self):
-        super(SaltnadoTestCase, self).setUp()
+        super().setUp()
         self.patched_environ = patched_environ(ASYNC_TEST_TIMEOUT="30")
         self.patched_environ.__enter__()
         self.addCleanup(self.patched_environ.__exit__)
 
     def tearDown(self):
-        super(SaltnadoTestCase, self).tearDown()
+        super().tearDown()
         if hasattr(self, "http_server"):
             del self.http_server
         if hasattr(self, "io_loop"):
@@ -130,6 +121,8 @@ def tearDown(self):
             del self._test_generator
         if hasattr(self, "application"):
             del self.application
+        if hasattr(self, "patched_environ"):
+            del self.patched_environ
 
     def build_tornado_app(self, urls):
         application = salt.ext.tornado.web.Application(urls, debug=True)
@@ -143,8 +136,6 @@ def build_tornado_app(self, urls):
     def decode_body(self, response):
         if response is None:
             return response
-        if six.PY2:
-            return response
         if response.body:
             # Decode it
             if response.headers.get("Content-Type") == "application/json":
@@ -154,7 +145,7 @@ def decode_body(self, response):
         return response
 
     def fetch(self, path, **kwargs):
-        return self.decode_body(super(SaltnadoTestCase, self).fetch(path, **kwargs))
+        return self.decode_body(super().fetch(path, **kwargs))
 
 
 class TestBaseSaltAPIHandler(SaltnadoTestCase):
@@ -242,7 +233,7 @@ def test_token(self):
 
         # send a token as a cookie
         response = self.fetch(
-            "/", headers={"Cookie": "{0}=foo".format(saltnado.AUTH_COOKIE_NAME)}
+            "/", headers={"Cookie": "{}=foo".format(saltnado.AUTH_COOKIE_NAME)}
         )
         token = salt.utils.json.loads(response.body)["token"]
         self.assertEqual(token, "foo")
@@ -252,7 +243,7 @@ def test_token(self):
             "/",
             headers={
                 saltnado.AUTH_TOKEN_HEADER: "foo",
-                "Cookie": "{0}=bar".format(saltnado.AUTH_COOKIE_NAME),
+                "Cookie": "{}=bar".format(saltnado.AUTH_COOKIE_NAME),
             },
         )
         token = salt.utils.json.loads(response.body)["token"]
@@ -365,7 +356,7 @@ def test_get_lowstate(self):
         Test transformations low data of the function _get_lowstate
         """
         valid_lowstate = [
-            {u"client": u"local", u"tgt": u"*", u"fun": u"test.fib", u"arg": [u"10"]}
+            {"client": "local", "tgt": "*", "fun": "test.fib", "arg": ["10"]}
         ]
 
         # Case 1. dictionary type of lowstate
@@ -613,7 +604,7 @@ def test_login(self):
         self.assertEqual(response.code, 200)
         response_obj = salt.utils.json.loads(response.body)["return"][0]
         token = response_obj["token"]
-        self.assertIn("session_id={0}".format(token), cookies)
+        self.assertIn("session_id={}".format(token), cookies)
         self.assertEqual(
             sorted(response_obj["perms"]),
             sorted(
@@ -636,7 +627,7 @@ def test_login(self):
         self.assertEqual(response.code, 200)
         response_obj = salt.utils.json.loads(response.body)["return"][0]
         token = response_obj["token"]
-        self.assertIn("session_id={0}".format(token), cookies)
+        self.assertIn("session_id={}".format(token), cookies)
         self.assertEqual(
             sorted(response_obj["perms"]),
             sorted(
@@ -659,7 +650,7 @@ def test_login(self):
         self.assertEqual(response.code, 200)
         response_obj = salt.utils.json.loads(response.body)["return"][0]
         token = response_obj["token"]
-        self.assertIn("session_id={0}".format(token), cookies)
+        self.assertIn("session_id={}".format(token), cookies)
         self.assertEqual(
             sorted(response_obj["perms"]),
             sorted(
@@ -675,7 +666,7 @@ def test_login_missing_password(self):
         Test logins with bad/missing passwords
         """
         bad_creds = []
-        for key, val in six.iteritems(self.auth_creds_dict):
+        for key, val in self.auth_creds_dict.items():
             if key == "password":
                 continue
             bad_creds.append((key, val))
@@ -693,7 +684,7 @@ def test_login_bad_creds(self):
         Test logins with bad/missing passwords
         """
         bad_creds = []
-        for key, val in six.iteritems(self.auth_creds_dict):
+        for key, val in self.auth_creds_dict.items():
             if key == "username":
                 val = val + "foo"
             if key == "eauth":
@@ -795,7 +786,7 @@ def test_websocket_handler_upgrade_to_websocket(self):
             "token"
         ]
 
-        url = "ws://127.0.0.1:{0}/all_events/{1}".format(self.get_http_port(), token)
+        url = "ws://127.0.0.1:{}/all_events/{}".format(self.get_http_port(), token)
         request = HTTPRequest(
             url, headers={"Origin": "http://example.com", "Host": "example.com"}
         )
@@ -812,7 +803,7 @@ def test_websocket_handler_bad_token(self):
             getattr(hashlib, self.opts.get("hash_type", "md5"))().hexdigest()
         )
 
-        url = "ws://127.0.0.1:{0}/all_events/{1}".format(self.get_http_port(), token)
+        url = "ws://127.0.0.1:{}/all_events/{}".format(self.get_http_port(), token)
         request = HTTPRequest(
             url, headers={"Origin": "http://example.com", "Host": "example.com"}
         )
@@ -835,7 +826,7 @@ def test_websocket_handler_cors_origin_wildcard(self):
             "token"
         ]
 
-        url = "ws://127.0.0.1:{0}/all_events/{1}".format(self.get_http_port(), token)
+        url = "ws://127.0.0.1:{}/all_events/{}".format(self.get_http_port(), token)
         request = HTTPRequest(
             url, headers={"Origin": "http://foo.bar", "Host": "example.com"}
         )
@@ -856,7 +847,7 @@ def test_cors_origin_single(self):
         token = salt.utils.json.loads(self.decode_body(response).body)["return"][0][
             "token"
         ]
-        url = "ws://127.0.0.1:{0}/all_events/{1}".format(self.get_http_port(), token)
+        url = "ws://127.0.0.1:{}/all_events/{}".format(self.get_http_port(), token)
 
         # Example.com should works
         request = HTTPRequest(
@@ -888,7 +879,7 @@ def test_cors_origin_multiple(self):
         token = salt.utils.json.loads(self.decode_body(response).body)["return"][0][
             "token"
         ]
-        url = "ws://127.0.0.1:{0}/all_events/{1}".format(self.get_http_port(), token)
+        url = "ws://127.0.0.1:{}/all_events/{}".format(self.get_http_port(), token)
 
         # Example.com should works
         request = HTTPRequest(
@@ -953,7 +944,7 @@ def setUp(self):
         if not os.path.exists(self.sock_dir):
             os.makedirs(self.sock_dir)
         self.addCleanup(shutil.rmtree, self.sock_dir, ignore_errors=True)
-        super(TestEventListener, self).setUp()
+        super().setUp()
 
     @slowTest
     def test_simple(self):
@@ -1029,7 +1020,7 @@ def test_clean_by_request(self):
         dummy_request_future_2 : will be timeout-ed by clean-by_request(dummy_request)
         """
 
-        class DummyRequest(object):
+        class DummyRequest:
             """
             Dummy request object to simulate the request object
             """
